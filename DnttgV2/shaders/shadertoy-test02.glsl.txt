#define IQ 0
#define PI 3.141592

vec3 voxelSize = vec3(0.25);//original value

vec2 seed;//seed for random

float simpleseed; //simple seed

float sphere(in vec3 p, in float r) {
    return length(p) - r;
}


float map( in vec3 p )
{

	//p.y = -p.y;
	//p *= (1.0/10.0);

	//vec4 color = texture(iChannel0, p);
		
    //return color.r;
    float rayDelta = sphere(p, 0.5);
    return rayDelta;
}

vec2 rand2n() {
    seed+=vec2(-1,1);
	// implementation based on: lumina.sourceforge.net/Tutorials/Noise.html
    return vec2(fract(sin(dot(seed.xy ,vec2(12.9898,78.233))) * 43758.5453),
		fract(cos(dot(seed.xy ,vec2(4.898,7.23))) * 23421.631));
}

vec3 ortho(vec3 v) {
    //  See : http://lolengine.net/blog/2013/09/21/picking-orthogonal-vector-combing-coconuts
    return abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0)  : vec3(0.0, -v.z, v.y);
}

vec3 getSampleBiased(vec3  dir, float power) {
	dir = normalize(dir);
	vec3 o1 = normalize(ortho(dir));
	vec3 o2 = normalize(cross(dir, o1));
	vec2 r = rand2n();
	r.x=r.x*2.*PI;
	r.y=pow(r.y,1.0/(power+1.0));
	float oneminus = sqrt(1.0-r.y*r.y);
	return cos(r.x)*oneminus*o1+sin(r.x)*oneminus*o2+r.y*dir;
}

vec3 getSample(vec3 dir) {
	return getSampleBiased(dir,0.0); // <- unbiased!
}

vec3 getCosineWeightedSample(vec3 dir) {
	return getSampleBiased(dir,1.0);
}


vec3 getBackground(vec3 dir)
{
	return vec3(0.95);
}

vec3 getConeSample(vec3 dir, float extent) {
        // Formula 34 in GI Compendium
	dir = normalize(dir);
	vec3 o1 = normalize(ortho(dir));
	vec3 o2 = normalize(cross(dir, o1));
	vec2 r =  rand2n();
	r.x=r.x*2.*PI;
	r.y=1.0-r.y*extent;
	float oneminus = sqrt(1.0-r.y*r.y);
	return cos(r.x)*oneminus*o1+sin(r.x)*oneminus*o2+r.y*dir;
}

vec3 worldToVoxel(vec3 i)
{
    return floor(i/voxelSize);
}

vec3 voxelToWorld(vec3 i)
{
    return i*voxelSize;	
}

float castRay(in vec3 origin, in vec3 direction, out int object, out int iterations) {
    float rayDistance = 0.0;
    float rayDelta = 0.0;
    vec3 rayPosition;
    
    rayPosition = origin;
    
    for (int i = 0; i < 64; i++) {
        iterations += 1;
        
        rayDelta = map(rayPosition);
        
        rayDistance += rayDelta;
        rayPosition = origin + direction * rayDistance;
        if (rayDelta <= 0.001) {
            return rayDistance;
        }
        if (rayDistance >= 10.0) {
            object = 0;
			return 10.0;
        }
    }
    
    object = 0;
    return 10.0;
}

vec3 voxelTrace(vec3 ro, vec3 rd, out bool hit, out vec3 hitNormal, out vec3 outvox)
{
    const int maxSteps = 64;
    const float isoValue = 0.0;

    vec3 voxel = worldToVoxel(ro);
    vec3 step = sign(rd);

    vec3 nearestVoxel = voxel + vec3(rd.x > 0.0, rd.y > 0.0, rd.z > 0.0);
    vec3 tMax = (voxelToWorld(nearestVoxel) - ro) / rd;
    vec3 tDelta = voxelSize / abs(rd);

    vec3 hitVoxel = voxel;
	
    hit = false;
    float hitT = 0.0;
    for(int i=0; i<maxSteps; i++) {
        float d = map(voxelToWorld(voxel));        
        if (d <= isoValue && !hit) {
            hit = true;
	    	hitVoxel = voxel;
            //break;
        }

        if (tMax.x < tMax.y && tMax.x < tMax.z) { 
            voxel.x += step.x;
            tMax.x += tDelta.x;
			if (!hit) {
				hitNormal = vec3(-step.x, 0.0, 0.0);
				hitT = tMax.x;
			}
        } else if (tMax.y < tMax.z) {
            voxel.y += step.y;
            tMax.y += tDelta.y;
			if (!hit) {
				hitNormal = vec3(0.0, -step.y, 0.0);		
				hitT = tMax.y;
			}
        } else {
            voxel.z += step.z;
            tMax.z += tDelta.z;
			if (!hit) {
				hitNormal = vec3(0.0, 0.0, -step.z);		
				hitT = tMax.z;
			}
        }
     
	    
    }

    //return voxelToWorld(hitVoxel);
	return ro + hitT*rd;
}


vec3 getRayColor(vec3 ro, vec3 rd, out float alpha, float i, bool debug)
{
    vec3 color = vec3(1.0, 1.0, 1.0);
    vec3 directLight = vec3(0.0, 0.0, 0.0);
    float Albedo = 0.4;
    int iterations = 0;
    int object = 0;
    
    vec3 rayOrigin = ro;
    vec3 rayDirection = rd;
    
    seed = rd.xy * (iTime + i + 1.0);
    
    bool hit;
    vec3 n;
    vec3 pos;
    vec3 outbox;
    vec3 sun_dir = normalize(vec3(0.0, 1.0, 0.0));
    
    for (int i = 0; i < 2; i++) {
        pos = voxelTrace(rayOrigin, rayDirection, hit, n, outbox);
        
        if (hit) {            
            //vec3 rayPosition = rayOrigin + rayDirection * rayDistance;
            //vec3 rayNormal = getNormal(rayPosition);
            vec3 newDirection = normalize(getSample(n));
            //vec3 newDirection = vec3(0.0,0.1,0.0);
            

            color *= vec3(0.6,0.5,0.0) * Albedo * 2.0;
            
            rayOrigin = pos + n *0.01 * 4.0;
            rayDirection = newDirection;
            
            if (debug == true && i == 1)
            {
                return vec3(rayOrigin.z, 0.0, 0.0);
            }
            
            vec3 sunSampleDir = getConeSample(sun_dir,0.0001);
			float sunLight = dot(n, sunSampleDir);
			
			pos = voxelTrace(rayOrigin, sunSampleDir, hit, n, outbox);
			if (sunLight>0.0 && !hit) {
				directLight += color*sunLight;
			}
            
        }
        else {
            return directLight + color * getBackground(rayDirection);
        }
    }
    
    return directLight + color * getBackground(rayDirection);


    //--------old code
	vec3 luminance = vec3(1.5);
	int RayDepth = 1;
    //bool hit;

    //vec3 n; //normal
	vec3 outvox; //hit out voxel
	
	seed = rd.xy + vec2(iTime + 1.0,iTime - 1.0);
	
	vec3 material = vec3(3.0, 2.0, 1.5);
	vec3 direct = vec3(0.0);
	//vec3 sun_dir = normalize(vec3(0.0, -1.0, 0.0));
	 
	//Just render normals
	//vec3 pos = voxelTrace(ro, rd, hit, n, outvox);
		
	//if (hit) {
	//	alpha = 1.0;
		
	//	return (n+vec3(1.,1.,1.))/2.; //with all colors;
	//}

	//return vec3(0.0);
	 
	 
	for (int i=0; i <= RayDepth; i++) {
		vec3 pos = voxelTrace(ro, rd, hit, n, outvox);
		
		if (hit) {
			alpha = 1.0;
			rd = normalize(getCosineWeightedSample(n)); // new direction (towards light)
			
            luminance *= material*0.125; //0.125 is albedo
			//ro = pos + n*0.0001; // new start point
			ro = pos + n*0.2; // new start point
			//ro = pos + n*0.0001;
			
			// Direct lighting
			vec3 sunSampleDir = getConeSample(sun_dir,0.0001);
			float sunLight = dot(n, sunSampleDir);
			
			pos = voxelTrace(ro, sunSampleDir, hit, n, outvox);
			if (sunLight>0.0 && !hit) {
				direct += luminance*sunLight;
			}
		}else{
			return direct + luminance * getBackground( rd );
		}
	}
	
	//return direct + luminance * getBackground( rd );
	return vec3(0.0);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    //vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    //fragColor = vec4(col,1.0);
    
    // pixel coordinates
	//vec2 p = vec2((2.0*fragCoord.x-128.0)/128.0, (2.0*fragCoord.y-128.0)/128.0); //this will change range to [-1...1]
    vec2 p = (fragCoord.xy / iResolution.xy)*2.0-1.0;
	
	
	vec3 ro = vec3( 0.0, 0.0, 1.0);
	vec3 ta = vec3( 0.0, 0.0, 0.0);

	// camera matrix
	vec3 ww = normalize( ta - ro );
	vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );
	vec3 vv = normalize( cross(uu,ww));
	// create view ray
	vec3 rd = normalize( p.x*uu + p.y*vv + 0.75*ww );
    
    vec2 point = vec2(-0.0, 0.0);
    float dist = distance(p, point);
    bool debug = false;
    
    if ( dist < 0.1)
    {
        debug = true;
        fragColor = vec4(sin(iTime)*0.5 + 0.5, 0.0 ,0.0, 1.0);
        //return;
    }
	if (IQ == 0)
	{
		//init simpleseed
		simpleseed = ro.x + ro.y * 3.43121412313;
		
		//raycast trace ray
		int RAYSAMPLES = 1;
		float alpha = 1.0;
		vec3 col = vec3(0.0);
		
		for (int i = 0; i < RAYSAMPLES; i++)
		{	
			//vec2 rpof = 4.*(hash2(simpleseed)-vec2(0.5)) / params.z; //this will make visible gaps between billboards
			vec2 rpof;
			rd = normalize( (p.x+rpof.x)*uu + (p.y+rpof.y)*vv + 0.75*ww );	
			col += getRayColor(ro, rd, alpha, float(i), debug);
		}

		col = col / float(RAYSAMPLES);
		
		fragColor = vec4(col, alpha); // final ray color + alpha channel
	}
	
}